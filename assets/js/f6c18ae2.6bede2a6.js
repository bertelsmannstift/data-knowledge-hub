"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4091],{5357:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>d,toc:()=>l});var i=a(4848),t=a(8453);const s={title:"Data Collection of Facebook and Instagram Ads"},r=void 0,d={id:"data-collection/03_00_platform-specific guidelines/03_04_data-collection_meta_ads",title:"Data Collection of Facebook and Instagram Ads",description:"<AuthorCard",source:"@site/docs/03_data-collection/03_00_platform-specific guidelines/03_04_data-collection_meta_ads.mdx",sourceDirName:"03_data-collection/03_00_platform-specific guidelines",slug:"/data-collection/03_00_platform-specific guidelines/03_04_data-collection_meta_ads",permalink:"/docs/data-collection/03_00_platform-specific guidelines/03_04_data-collection_meta_ads",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Data Collection of Facebook and Instagram Ads"},sidebar:"docs",previous:{title:"Data Collection on Rumble",permalink:"/docs/data-collection/03_00_platform-specific guidelines/03_01_data-collection_rumble"},next:{title:"Webscraping",permalink:"/docs/data-collection/03_03_web-scraping-intro"}},o={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Step 1: Setting Up API Access (Verification &amp; Developer Account)",id:"step-1-setting-up-api-access-verification--developer-account",level:3},{value:"Step 2: Installing and Loading R Packages",id:"step-2-installing-and-loading-r-packages",level:3},{value:"Step 3: Authenticating with your Access Token",id:"step-3-authenticating-with-your-access-token",level:3},{value:"Querying the Ad Library API",id:"querying-the-ad-library-api",level:2},{value:"Step 4: Building a Query to the Ad Library API (<code>adlib_build_query</code>)",id:"step-4-building-a-query-to-the-ad-library-api-adlib_build_query",level:3},{value:"Parameter Breakdown",id:"parameter-breakdown",level:4},{value:"Next Step",id:"next-step",level:4},{value:"Step 5: Retrieving Ad Data from the API (<code>adlib_get</code>)",id:"step-5-retrieving-ad-data-from-the-api-adlib_get",level:3},{value:"Step 6: Converting to a Tidy Data Frame",id:"step-6-converting-to-a-tidy-data-frame",level:3},{value:"Step 7: Handling Pagination for Larger Datasets (<code>paginate_meta_api</code>)",id:"step-7-handling-pagination-for-larger-datasets-paginate_meta_api",level:3},{value:"Analzing the Data",id:"analzing-the-data",level:2},{value:"Step 8: Analyzing Ad Volume and Top Advertisers",id:"step-8-analyzing-ad-volume-and-top-advertisers",level:3},{value:"Who is advertising on the climate topic?",id:"who-is-advertising-on-the-climate-topic",level:4},{value:"Step 9: Examining Demographic Distributions",id:"step-9-examining-demographic-distributions",level:3},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components},{AuthorCard:s,Details:r,LanguageChip:d,LastUpdatedByChip:o,LevelChip:l,PlatformChip:c}=n;return s||p("AuthorCard",!0),r||p("Details",!0),d||p("LanguageChip",!0),o||p("LastUpdatedByChip",!0),l||p("LevelChip",!0),c||p("PlatformChip",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(l,{level:"Intermediate"}),"\n",(0,i.jsx)(c,{platform:"Meta"}),"\n",(0,i.jsx)(d,{lang:"R"}),"\n",(0,i.jsx)(s,{name:"Fabio Votta",avatar:"FV",avatarSrc:a(1345).A,position:"ASCoR | University of Amsterdam",website:"https://www.favstats.eu/",bluesky:"https://bsky.app/profile/favstats.eu",linkedin:"https://www.linkedin.com/in/dr-fabio-votta-81a862131"}),"\n",(0,i.jsx)(o,{authorOriginal:"Fabio Votta",createdOn:"30.07.2025"}),"\n",(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(n.p,{children:"Meta\u2019s Ad Library provides a public record of ads that run on Facebook\nand Instagram. Researchers, journalists, and civic watchdogs can use\nthis data to analyze advertising trends, for example, tracking political\ncampaign ads, spending, and the reached demographics. The Meta Ad\nLibrary API offers programmatic access to these ads, enabling retrieval\nof detailed ad content and performance information. Each ad entry\nincludes metadata such as the ad\u2019s text, the advertiser\u2019s page, the time\nperiod it ran, the amount spent (as a range), impressions delivered\n(also as a range), and breakdowns of the audience by age, gender, and\nregion. Importantly, many metrics are given as ranges (min\u2013max) rather\nthan precise values."}),"\n",(0,i.jsxs)(n.p,{children:["This tutorial will demonstrate how to use R (with\nthe ",(0,i.jsx)(n.code,{children:"tidyverse"})," ecosystem) and the ",(0,i.jsx)(n.code,{children:"Radlibrary"})," R package to access the\nMeta Ad Library via its official API. We will walk through obtaining API\naccess, constructing queries to find ads (by keyword or page id),\nretrieving ad data, and performing analyses such as ad volume and spend\nover time, top advertisers, and demographic targeting patterns."]}),"\n",(0,i.jsx)(n.h3,{id:"step-1-setting-up-api-access-verification--developer-account",children:"Step 1: Setting Up API Access (Verification & Developer Account)"}),"\n",(0,i.jsx)(n.p,{children:"Before writing any code, you need to secure access to the Ad Library\nAPI. Meta requires a few one-time setup steps:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Confirm your identity and location"}),": Facebook mandates an ",(0,i.jsx)(n.a,{href:"https://www.facebook.com/id/hub",children:"ID\nverification process"})," for anyone\naccessing political ad data (the same process required to run\npolitical ads). You will need to provide a government ID and proof\nof your country. This can take 1\u20132 days for approval."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:a(9273).A+"",width:"1580",height:"924"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Create a Facebook Developer account"}),": Go to the Facebook for\nDevelopers portal and sign up with your Facebook account (if you\nhaven\u2019t already). Agree to any platform policies as needed. Once you\nhave a developer account, create a new \u201cApp\u201d in the dashboard\n(choose Business or Custom app type for this\npurpose). This app is just a container to obtain API credentials."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Generate an access token"}),": The Ad Library API is accessed via\nMeta\u2019s Graph API. The simplest way to get a token is by using the\n",(0,i.jsx)(n.a,{href:"https://developers.facebook.com/tools/explorer",children:"Graph API Explorer"}),"\ntool. Once you are on the Graph API Explorer page, generate a user\naccess token. You need to add the permission ",(0,i.jsx)(n.code,{children:"ads_read"})," in the token\ngeneration dialog so that the token is authorized to query the ads\narchive. Once generated, copy this token for use in R. Keep it\nconfidential and treat it like a password \u2013 anyone with this token\ncould potentially query the API on your behalf until it expires."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{title:"Note",type:"hub-note",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Token expiration:"})," By default, tokens from the Explorer are ",(0,i.jsx)(n.a,{href:"https://developers.facebook.com/docs/facebook-login/guides/access-tokens#termtokens",children:"short-lived"}),"(usually ~1-2 hours). For short analysis sessions that might be\nsufficient, but in most cases you will likely need longer access. You can exchange the short-lived token for a 60-day token using your App\u2019s App ID and App Secret. In this tutorial, we will proceed with a short-lived token for simplicity, but it is strongly encouraged to get a long-term token for your analysis (holds for 60 days). For instructions on how to do this, refer to the ",(0,i.jsx)(n.a,{href:"https://facebookresearch.github.io/Radlibrary/articles/Radlibrary.html#generating-persistent-tokens",children:"official Meta documentation on access tokens"}),"."]})}),"\n",(0,i.jsx)(n.h3,{id:"step-2-installing-and-loading-r-packages",children:"Step 2: Installing and Loading R Packages"}),"\n",(0,i.jsxs)(n.p,{children:["We will use an R package called ",(0,i.jsx)(n.code,{children:"Radlibrary"})," (by Meta\u2019s Facebook\nResearch team) to interact with the Ad Library API. ",(0,i.jsx)(n.code,{children:"Radlibrary"})," is a\nconvenient wrapper that handles authentication and query construction,\nsaving us from crafting raw Graph API calls (which we could also do if\nwe feel fancy like that). It also helps format results into tidy data\nframes. In addition, we will use the ",(0,i.jsx)(n.code,{children:"tidyverse"})," for data manipulation\n(",(0,i.jsx)(n.code,{children:"dplyr"}),", ",(0,i.jsx)(n.code,{children:"tidyr"}),") and ",(0,i.jsx)(n.code,{children:"ggplot2"})," for visualization. Finally, we will use\nmy very own package,\n",(0,i.jsx)(n.a,{href:"www.github.com/favstats/metatargetr",children:(0,i.jsx)(n.code,{children:"metatargetr"})})," to retrieve some ad\nspending data. If you haven\u2019t installed these packages, do so first:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:'# Install Radlibrary from GitHub (it\u2019s not on CRAN as of writing)\nif(!("pak" %in% installed.packages())){\n  install.packages("pak")  # if devtools not already installed\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:'# Install Radlibrary\npak::pak("facebookresearch/Radlibrary")\n# Install metatargetr\npak::pak("favstats/metatargetr")\n# Install lubridate \npak::pak("lubridate")\n# Install tidyverse if not already (includes dplyr, ggplot2, etc.)\npak::pak("tidyverse")\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:"# Load the libraries in your R session\nlibrary(Radlibrary)\nlibrary(metatargetr)\nlibrary(lubridate)  # for convenient date functions\nlibrary(tidyverse)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Make sure ",(0,i.jsx)(n.code,{children:"Radlibrary"})," installed successfully (you might need to update\nRtools on Windows or install additional library on Linux distributions).\nNow you are ready to use the Meta Ad Library API in R!"]}),"\n",(0,i.jsx)(n.h3,{id:"step-3-authenticating-with-your-access-token",children:"Step 3: Authenticating with your Access Token"}),"\n",(0,i.jsxs)(n.p,{children:["With your user access token in hand (from Step 1), you need to provide\nit to ",(0,i.jsx)(n.code,{children:"Radlibrary"})," so it can authenticate API requests. ",(0,i.jsx)(n.strong,{children:"As a general\nrule, never hard-code the token directly in scripts."})," One safe approach\nis to use R\u2019s readline() function to paste the token interactively (this\navoids storing it in your R command history):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:'# Prompt for the token (paste your token string at the prompt that appears)\ntoken <- readline(prompt = "Enter your Facebook API access token: ")\n'})}),"\n",(0,i.jsx)(n.p,{children:"When you run this, R will pause and let you paste the token. Hit Enter\nand it will be stored in the token variable for use. This method ensures\nthe token is not visible in your script or R history."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Optionally:"})}),"\n",(0,i.jsx)(n.p,{children:"You can also save the token as an environment variable like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:"# Set the token as an environment variable\nSys.setenv(META_API_TOKEN = token)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Now, in the rest of your script, you can retrieve your token like this\n",(0,i.jsx)(n.em,{children:"but only after you have restarted your R session"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:'token <- Sys.getenv("META_API_TOKEN")\n'})}),"\n",(0,i.jsx)(n.h2,{id:"querying-the-ad-library-api",children:"Querying the Ad Library API"}),"\n",(0,i.jsxs)(n.h3,{id:"step-4-building-a-query-to-the-ad-library-api-adlib_build_query",children:["Step 4: Building a Query to the Ad Library API (",(0,i.jsx)(n.code,{children:"adlib_build_query"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["Now we get to the moment we have been waiting for \u2013 how to get the data!\nThe Ad Library API requires specifying what ads you want to retrieve.\nThis is done by constructing a query with various parameters. The\n",(0,i.jsx)(n.code,{children:"Radlibrary"})," function ",(0,i.jsx)(n.code,{children:"adlib_build_query()"})," helps create this query\nobject."]}),"\n",(0,i.jsx)(n.p,{children:"We will start with a simple example scenario: Suppose we want to find\nads related to the climate in the runup to the 2025 German parliamentary\nelections. We are interested in all such ads (whether currently active\nor inactive) that were shown three weeks before election day but only\nthose that were classified or self-identified as political or issue ads."}),"\n",(0,i.jsx)(n.p,{children:"First, we specifiy a list of all the variables that we would like to\nretrieve, here I use all available variables as of June 2025."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:'## First we \nad_fields <- c(\n    ## some meta info and unique identifier\n    "page_id", "page_name",# "id", # id is added automatically\n    ## general info, text, description, run times\n    "ad_creation_time", "ad_delivery_start_time", "ad_delivery_stop_time", \n    "ad_creative_bodies", "ad_creative_link_captions", "ad_creative_link_descriptions",\n    "ad_creative_link_titles",  "ad_snapshot_url", "languages", "publisher_platforms",\n    ## spending info\n    "currency",  "spend", "bylines", "beneficiary_payers",\n    ## delivery and reach\n    "delivery_by_region",  "demographic_distribution",\n    "estimated_audience_size", "impressions",\n    # "br_total_reach", # unique reach (only available for Brazil)\n    ## EU only\n    "eu_total_reach", "age_country_gender_reach_breakdown",\n    "target_ages", "target_gender",  "target_locations"\n)\n'})}),"\n",(0,i.jsx)(n.p,{children:"Now we are ready to build the query step by step:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:'# Build an Ad Library API query for ads related to "climate" in Germany during 2025 election\nquery <- adlib_build_query(\n  ad_reached_countries = "DE",          # country where ads were delivered\n  ad_delivery_date_min = "2025-02-03",  # specify minimum date: 21 days before election day\n  ad_delivery_date_max = "2025-02-23",  # specify maximum date: election day\n  ad_active_status    = "ALL",          # include both active and inactive ads \n  search_terms        = "klima", # keywords to search in ad text or metadata\n  ad_type             = "POLITICAL_AND_ISSUE_ADS",  # restrict to political/issue ads\n  fields              = ad_fields,  # data fields we want\n  limit               = 200            # number of results per page (max 1000)\n)\n'})}),"\n",(0,i.jsx)(n.admonition,{title:"Note",type:"hub-note",children:(0,i.jsxs)(n.p,{children:["You might encounter the following warning: ",(0,i.jsx)(n.em,{children:"Warning: Unsupported fields supplied:"})," followed by a list of parameters. This warning can be safely ignored. The ",(0,i.jsx)(n.code,{children:"Radlibrary"})," package, despite being developed by the Facebook team, may not be up to date with the newest parameters."]})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"parameter-breakdown",children:"Parameter Breakdown"}),"\n",(0,i.jsx)(n.p,{children:"Let us unpack the parameters used in the API query (and some additional\nones):"}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsxs)("summary",{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"ad_reached_countries"})}),(0,i.jsx)(n.br,{}),"\n","Specifies the countries where the ads were delivered."]}),(0,i.jsxs)(n.p,{children:["For example, setting this to ",(0,i.jsx)(n.code,{children:'"DE"'})," retrieves ads delivered in\nGermany.",(0,i.jsx)(n.br,{}),"\n","At least one country code must be specified. Multiple countries can be\nprovided as a vector, e.g., ",(0,i.jsx)(n.code,{children:'c("US", "CA")'}),"."]})]}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsxs)("summary",{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"ad_delivery_date_min"})})," and  ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"ad_delivery_date_max"})}),(0,i.jsx)(n.br,{}),"\n","Define the date range for when the ads were delivered."]}),(0,i.jsxs)(n.p,{children:["The format should be ",(0,i.jsx)(n.code,{children:'"YYYY-MM-DD"'}),".",(0,i.jsx)(n.br,{}),"\n","For instance, setting ",(0,i.jsx)(n.code,{children:'ad_delivery_date_min = "2025-02-22"'})," and",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.code,{children:'ad_delivery_date_max = "2025-02-23"'})," retrieves ads delivered between",(0,i.jsx)(n.br,{}),"\n","February 22 and February 23, 2025."]})]}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsxs)("summary",{children:[" ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"ad_active_status"})})," determines the delivery status of the ads to retrieve."]}),(0,i.jsxs)(n.p,{children:["If not specified, the default is ",(0,i.jsx)(n.code,{children:'"ACTIVE"'}),", which returns only",(0,i.jsx)(n.br,{}),"\n","currently active ads.",(0,i.jsx)(n.br,{}),"\n","For historical analysis, setting this to ",(0,i.jsx)(n.code,{children:'"ALL"'})," retrieves both active",(0,i.jsx)(n.br,{}),"\n","and inactive ads."]}),(0,i.jsx)(n.p,{children:"Valid values:"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"ALL"'}),": all ads, past and present"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"ACTIVE"'}),": only currently running ads"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"INACTIVE"'}),": only ads that have stopped running"]}),"\n"]})]}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsxs)("summary",{children:[" ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"search_terms"})})," is a keyword or phrase to search within the ad\u2019s content, title, or disclaimer text."]}),(0,i.jsxs)(n.p,{children:["The API treats a blank space as a logical ",(0,i.jsx)(n.code,{children:"AND"})," and searches for both",(0,i.jsx)(n.br,{}),"\n","terms without other operators.",(0,i.jsx)(n.br,{}),"\n","For example, ",(0,i.jsx)(n.code,{children:'"climate change"'})," is interpreted as ",(0,i.jsx)(n.code,{children:'"climate"'})," AND",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.code,{children:'"change"'}),".",(0,i.jsx)(n.br,{}),"\n","To search for an exact phrase, use the ",(0,i.jsx)(n.code,{children:"search_type"})," parameter set to",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.code,{children:'"KEYWORD_EXACT_PHRASE"'}),"."]})]}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsxs)("summary",{children:[" ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"search_page_ids"})})," is an optional alternative to ",(0,i.jsx)(n.code,{children:"search_terms"})," and retrieves ads from a specific Facebook Page."]}),(0,i.jsxs)(n.p,{children:["Provide the numeric Page ID (e.g., ",(0,i.jsx)(n.code,{children:'"1234567890"'}),").",(0,i.jsx)(n.br,{}),"\n","This is ideal when focusing on a particular advertiser\u2019s metadata and",(0,i.jsx)(n.br,{}),"\n","content."]}),(0,i.jsx)(n.p,{children:"You can find page IDs via:"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The Ad Library API (just query it by ",(0,i.jsx)(n.code,{children:"search_terms"})," as we show below and take note of a page id of interest)."]}),"\n",(0,i.jsxs)(n.li,{children:["Download spending reports in the ",(0,i.jsx)(n.a,{href:"https://www.facebook.com/ads/library/report/",children:"Ad Library Report"})," which includes spending by page id."]}),"\n",(0,i.jsxs)(n.li,{children:["In the URL of an Ad Library page, i.e. after the ",(0,i.jsx)(n.code,{children:"view_all_page_id"})," URL parameter. For example:",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.a,{href:"https://www.facebook.com/ads/library/?view_all_page_id=179587888720522",children:"https://www.facebook.com/ads/library/?view_all_page_id=179587888720522"})," is the Ad Library Page for the U.S. Department of Homeland Security and ",(0,i.jsx)(n.em,{children:"179587888720522"})," is the page id."]}),"\n"]})]}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsxs)("summary",{children:[" ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"ad_type"})})," specifies the category of ads to retrieve."]}),(0,i.jsx)(n.p,{children:"Valid values include:"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"ALL"'}),": Retrieves all ads, regardless of category."]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:'"POLITICAL_AND_ISSUE_ADS"'})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:'"EMPLOYMENT_ADS"'})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:'"HOUSING_ADS"'})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:'"FINANCIAL_PRODUCTS_AND_SERVICES_ADS"'})}),"\n"]})]}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsxs)("summary",{children:[" ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"fields"})})," determines what information about each ad will be returned."]}),(0,i.jsxs)(n.p,{children:["In our example, we request specific fields defined in the ",(0,i.jsx)(n.code,{children:"ad_fields"}),(0,i.jsx)(n.br,{}),"\n","variable.",(0,i.jsx)(n.br,{}),"\n","The fields are categorized as follows:"]}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Meta Information and Identifiers"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"page_id"'}),": Unique identifier for the Facebook Page."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"page_name"'}),": Name of the Facebook Page."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"General Information"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"ad_creation_time"'}),": Time when the ad was created."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"ad_delivery_start_time"'}),": Start time of the ad delivery."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"ad_delivery_stop_time"'}),": Stop time of the ad delivery."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"ad_creative_bodies"'}),": Main text content of the ad."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"ad_creative_link_captions"'}),": Captions in the call-to-action section."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"ad_creative_link_descriptions"'}),": Descriptions in the call-to-action section."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"ad_creative_link_titles"'}),": Titles in the call-to-action section."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"ad_snapshot_url"'}),": URL to a snapshot of the ad."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"languages"'}),": Languages used in the ad."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"publisher_platforms"'}),": Platforms where the ad was published (e.g., Facebook, Instagram)."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Spending Information"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"currency"'}),": Currency used for the ad spend."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"spend"'}),": Amount spent on the ad."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"bylines"'}),": Bylines associated with the ad."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"beneficiary_payers"'}),": Entities that paid for the ad."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Delivery and Reach"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"delivery_by_region"'}),": Regional delivery information."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"demographic_distribution"'}),": Demographic breakdown of the ad\u2019s audience."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"estimated_audience_size"'}),": Estimated size of the audience."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"impressions"'}),": Number of times the ad was displayed."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"EU-Specific Fields"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"eu_total_reach"'}),": Total reach within the European Union."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"age_country_gender_reach_breakdown"'}),": Breakdown of reach by age, country, and gender."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"target_ages"'}),": Targeted age groups."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"target_gender"'}),": Targeted genders."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"target_locations"'}),": Targeted locations."]}),"\n"]}),"\n"]}),"\n"]}),(0,i.jsxs)(n.p,{children:["These fields provide comprehensive information about each ad, including",(0,i.jsx)(n.br,{}),"\n","its content, delivery, and audience targeting. For more info, you can",(0,i.jsx)(n.br,{}),"\n","check the ",(0,i.jsx)(n.a,{href:"https://www.facebook.com/ads/library/api/",children:"Meta Ad Library API documentation"}),"."]})]}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsxs)("summary",{children:[" ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"limit"})})," limits the number of results per API call."]}),(0,i.jsxs)(n.p,{children:["The default value is 25, and the maximum is 1,000.",(0,i.jsx)(n.br,{}),"\n","If your query could return more, you will need to paginate (more about",(0,i.jsx)(n.br,{}),"\n","that later).",(0,i.jsx)(n.br,{}),"\n","For now, we assume ",(0,i.jsx)(n.code,{children:"100"})," is sufficient for demonstration purposes."]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"next-step",children:"Next Step"}),"\n",(0,i.jsxs)(n.p,{children:["At this point, we have only created a ",(0,i.jsx)(n.strong,{children:"query object"}),", a structured\nlist containing all parameters. ",(0,i.jsx)(n.strong,{children:"The query has not yet been sent"})," to\nMeta."]}),"\n",(0,i.jsxs)(n.p,{children:["The function ",(0,i.jsx)(n.code,{children:"adlib_build_query()"})," only constructs the query. You can\ninspect it by printing ",(0,i.jsx)(n.code,{children:"query"}),", which will show its components and the\nexact URL to be called."]}),"\n",(0,i.jsxs)(n.p,{children:["Let us now proceed to ",(0,i.jsx)(n.strong,{children:"fetch the data"}),"."]}),"\n",(0,i.jsxs)(n.h3,{id:"step-5-retrieving-ad-data-from-the-api-adlib_get",children:["Step 5: Retrieving Ad Data from the API (",(0,i.jsx)(n.code,{children:"adlib_get"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["To execute the query and get results, we use ",(0,i.jsx)(n.code,{children:"Radlibrary"}),"\u2019s function\n",(0,i.jsx)(n.code,{children:"adlib_get()"}),". This function takes our query and the access token, sends\nthe request to Meta\u2019s Graph API, and returns the response. Let\u2019s call\nit:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:"# Execute the query and retrieve data\nresult <- adlib_get(query, token = token)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Under the hood, this hits the Graph API\u2019s /ads_archive endpoint with all\nthe parameters we specified. The result we get back is an object of\nclass ",(0,i.jsx)(n.code,{children:"adlib_data_response"}),". It contains the data and some metadata."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:"glimpse(result$data[[1]], max.level = 1)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'     $ id                                : chr "547343151714655"\n     $ page_id                           : chr "530858850114749"\n     $ page_name                         : chr "Undone Work GmbH"\n     $ ad_creation_time                  : chr "2025-02-23"\n     $ ad_delivery_start_time            : chr "2025-02-23"\n     $ ad_delivery_stop_time             : chr "2025-02-28"\n     $ ad_creative_bodies                :List of 1\n     $ ad_creative_link_captions         :List of 1\n     $ ad_snapshot_url                   : chr "https://www.facebook.com/ads/archive/render_ad/?id=547343151714655&access_token=XXXX"| __truncated__\n     $ languages                         :List of 1\n     $ publisher_platforms               :List of 1\n     $ currency                          : chr "EUR"\n     $ spend                             :List of 2\n     $ bylines                           : chr "Undone Work GmbH"\n     $ beneficiary_payers                :List of 1\n     $ delivery_by_region                :List of 16\n     $ demographic_distribution          :List of 15\n     $ estimated_audience_size           :List of 1\n     $ impressions                       :List of 2\n     $ eu_total_reach                    : int 616\n     $ age_country_gender_reach_breakdown:List of 1\n     $ target_ages                       :List of 2\n     $ target_gender                     : chr "All"\n     $ target_locations                  :List of 1\n'})}),"\n",(0,i.jsx)(n.p,{children:"Now that result is in hand, let\u2019s convert it into a more\nanalysis-friendly format."}),"\n",(0,i.jsx)(n.h3,{id:"step-6-converting-to-a-tidy-data-frame",children:"Step 6: Converting to a Tidy Data Frame"}),"\n",(0,i.jsx)(n.p,{children:"Radlibrary provides an S3 method to turn the result into a tibble (a\ntidyverse-friendly data frame). We simply use as_tibble():"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:"ads_df <- as_tibble(result, censor_access_token = TRUE)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["By default, we include ",(0,i.jsx)(n.code,{children:"censor_access_token = TRUE"})," to strip out the\ntoken from any embedded URLs in the data (this is a safety measure so we\ndon\u2019t accidentally reveal our token when inspecting data). Now ",(0,i.jsx)(n.code,{children:"ads_df"}),"\nis a tibble where each row is one ad and each column is a variable\nreturned by the API."]}),"\n",(0,i.jsxs)(n.p,{children:["If you want to check the columns, try ",(0,i.jsx)(n.code,{children:"glimpse(ads_df)"})," or\n",(0,i.jsx)(n.code,{children:"names(ads_df)"})," to inspect the structure of the ",(0,i.jsx)(n.code,{children:"ads_df"})," data frame.\nSome of the key columns include: - ",(0,i.jsx)(n.code,{children:"impressions_lower"}),",\n",(0,i.jsx)(n.code,{children:"impressions_upper"}),": The estimated range of impressions delivered. -\n",(0,i.jsx)(n.code,{children:"spend_lower"}),", ",(0,i.jsx)(n.code,{children:"spend_upper"}),": The estimated range of ad spend in the\ncurrency used - ",(0,i.jsx)(n.code,{children:"demographic_distribution"}),": A so-called list-column\ncontaining, for each ad, a data frame of demographic percentages (since\nwe asked for it). We will explore how to work with this column in Step\n9."]}),"\n",(0,i.jsxs)(n.h3,{id:"step-7-handling-pagination-for-larger-datasets-paginate_meta_api",children:["Step 7: Handling Pagination for Larger Datasets (",(0,i.jsx)(n.code,{children:"paginate_meta_api"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["The Meta Ad Library API returns only a limited number of ads per\nrequest. To retrieve more than the default amount, you need to handle\npagination by following the ",(0,i.jsx)(n.code,{children:"next_page"})," links provided in the API\nresponse."]}),"\n",(0,i.jsxs)(n.p,{children:["While the ",(0,i.jsx)(n.code,{children:"Radlibrary"})," package offers the ",(0,i.jsx)(n.code,{children:"adlib_get_paginated()"}),"\nfunction to assist with pagination, it unfortunately does NOT handle\nrate limiting or delays between requests. To address this, I have\nimplemented a custom function, ",(0,i.jsx)(n.code,{children:"paginate_meta_api()"}),", which automates\npagination and includes logic to manage API rate limits by introducing\nappropriate delays between requests. Specify ",(0,i.jsx)(n.code,{children:"max_pages"}),", i.e. how many\niterations you want to go through and also whether it should print\nupdate while retrieving data ",(0,i.jsx)(n.code,{children:"verbose = TRUE"}),", and API usage limits\n",(0,i.jsx)(n.code,{children:"api_health = TRUE"})," (by default ",(0,i.jsx)(n.code,{children:"FALSE"}),")."]}),"\n",(0,i.jsx)(n.p,{children:"Here is how you can use the custom function:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:'# Load the custom pagination function\nsource("https://gist.githubusercontent.com/favstats/ac37f6a7c881dddfa1c156bfb3e2dbdf/raw/b49e3f73881a4595309480e418658e018fbd0980/paginate_meta_api.R")\n\n# Retrieve all pages with delay logic\nclimate_ads <- paginate_meta_api(query, token, max_pages = 100, verbose = FALSE, api_health = FALSE)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["At this stage, we have a data frame ",(0,i.jsx)(n.code,{children:"climate_ads"})," of all retrieved ads\nand their metadata. We can now perform analysis on this data. Let us\ntackle a few common analysis tasks one by one."]}),"\n",(0,i.jsx)(n.h2,{id:"analzing-the-data",children:"Analzing the Data"}),"\n",(0,i.jsx)(n.h3,{id:"step-8-analyzing-ad-volume-and-top-advertisers",children:"Step 8: Analyzing Ad Volume and Top Advertisers"}),"\n",(0,i.jsx)(n.p,{children:"A basic question is how the number of ads changes\nover time. For example, did advertising surge closer to election day? We\ncan visualize the number of ads in our dataset by date by using the ad\ndelivery start date as the date an ad \u201centered\u201d the library (since if an\nad is active for multiple days, it is counted on the first day it ran).\nLet us create a time series of ad count by day:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:'climate_ads %>%\n  mutate(start_date = as.Date(ad_delivery_start_time)) %>%   # extract date portion\n  count(start_date) %>%\n  ggplot(aes(x = start_date, y = n)) +\n  geom_line(color = "steelblue") +\n  labs(x = "Date", y = "Number of Ads Started", \n       title = "Daily Count of New Ads in Ad Library (\\"climate\\" query in Germany)") +\n  theme_minimal()\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:a(2948).A+"",width:"2400",height:"1800"})}),"\n",(0,i.jsx)(n.p,{children:"This code groups ads by their start date and counts them, then plots a\nline graph. The result shows that we retrieved much more data than we\nhad specified. This sometimes happens \u2013 the API is not perfect. We\nfilter to include only data within the specified timeframe."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:'climate_ads %>%\n  mutate(start_date = as.Date(ad_delivery_start_time)) %>%   # extract date portion\n  count(start_date) %>%\n  filter(start_date >= as.Date("2025-02-03")) %>% \n  ggplot(aes(x = start_date, y = n)) +\n  geom_line(color = "darkgreen") +\n  labs(x = "Date", y = "Number of Ads Started", \n       title = "Daily Count of New Ads in Ad Library (\\"climate\\" query in Germany)") +\n  theme_minimal()\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:a(8967).A+"",width:"2400",height:"1800"})}),"\n",(0,i.jsxs)(n.p,{children:["Another limitation with counting ads is that the ads listed in the ad\nlibrary do not represent unique ads, but rather ad runs. If an\nadvertiser runs the same ad again with some changes in settings, it will\nbe counted as a separate ad. This may overinflate the number of unique\nads. One possible way to address this is to filter for unique texts\n(e.g. ",(0,i.jsx)(n.code,{children:"ad_creative_bodies"}),")."]}),"\n",(0,i.jsx)(n.p,{children:"Another approach is to aggregate by spending, which gives a sense of\nwhere the advertiser\u2019s focus lies."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:'climate_ads %>%\n  mutate(keyword = "climate") %>% \n  mutate(start_date = as.Date(ad_delivery_start_time)) %>%   # extract date portion\n  group_by(start_date,keyword) %>% \n  summarize(spend_lower = sum(spend_lower),\n            spend_upper = sum(spend_upper)) %>% \n  ungroup() %>% \n  rowwise() %>% \n  mutate(spend_mid = median(c(spend_lower, spend_upper))) %>% \n  filter(start_date >= as.Date("2025-02-03")) %>% \n  ggplot(aes(x = start_date, y = spend_mid, color = keyword)) +\n  geom_ribbon(aes(ymin = spend_lower, ymax = spend_upper), alpha = 0.1, linetype = "blank") +\n  geom_line() +\n  labs(x = "Date", y = "Daily Ad Spending in Euro", \n       title = "Daily Spending on Ads in Ad Library (\\"climate\\" query in Germany)") +\n  theme_minimal() +\n  scale_color_manual(values = c( "darkgreen")) +\n  theme(legend.position = "bottom")\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:a(834).A+"",width:"2400",height:"1800"})}),"\n",(0,i.jsx)(n.h4,{id:"who-is-advertising-on-the-climate-topic",children:"Who is advertising on the climate topic?"}),"\n",(0,i.jsx)(n.p,{children:"Another common analysis is to identify which organizations or pages are\nrunning the most ads in your data. We can easily rank advertisers by the\nnumber of ads:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:'climate_ads  %>% \n  group_by(page_name) %>% \n  dplyr::summarize(spend_upper = sum(spend_upper)) %>%\n  ungroup() %>% \n  arrange(desc(spend_upper)) %>% \n  slice(1:10) %>% \n  mutate(page_name =fct_reorder(page_name, spend_upper)) %>% \n  ggplot(aes(x = page_name, y = spend_upper)) +\n  geom_col(fill="darkgray") +\n  coord_flip() +   # flip for horizontal bars (easier to read names)\n  labs(x = "Page Name", y = "Upper Spending Boundary",\n       title = "Top 20 Advertisers in \\"Climate\\" Ad Dataset") +\n  theme_minimal()\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:a(8893).A+"",width:"864",height:"480"})}),"\n",(0,i.jsxs)(n.p,{children:["Given that search terms sometimes are a bit unpredictable and don\u2019t\nalways work as expected, we can also query the top 10 advertisers based\non spending. We can do so by retrieving the spending reports from Meta,\nconveniently archived by the\n",(0,i.jsx)(n.a,{href:"www.github.com/favstats/metatargetr",children:(0,i.jsx)(n.code,{children:"metatargetr"})})," package. For a full tutorial on ",(0,i.jsx)(n.code,{children:"metatargetr"})," and its capabilities ",(0,i.jsx)(n.a,{href:"https://data-knowledge-hub.com/docs/data-analysis/04_05_metatargetr",children:"see this tutorial"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:'spending_report <- get_report_db("DE", timeframe = 30, ds = "2025-02-23")\n\nnational_parties <- spending_report %>% \n  filter(page_name %in% c("Die Linke", "SPD", "B\xdcNDNIS 90/DIE GR\xdcNEN", "FDP", "CDU", "AfD"))\n  \n# Build an Ad Library API query for ads related to "climate" in Germany during 2025 election\nquery <- adlib_build_query(\n  ad_reached_countries = "DE",          # country where ads were delivered\n  ad_delivery_date_min = "2025-02-03",  # specify minimum date: 21 days before election day\n  ad_delivery_date_max = "2025-02-23",  # specify maximum date: election day\n  ad_active_status    = "ALL",          # include both active and inactive ads \n  search_page_ids     = national_parties$page_id, # search page IDs, up to 10 at once\n  ad_type             = "POLITICAL_AND_ISSUE_ADS",  # restrict to political/issue ads\n  fields              = ad_fields,  # data fields we want\n  limit               = 200            # number of results per page (max 1000)\n)\n\ntop_ads <- paginate_meta_api(query, token, max_pages = 100, verbose = TRUE, api_health = TRUE)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["We are going to visualize some of the text included inside the ad data\nby creating a ",(0,i.jsx)(n.em,{children:"chatter plot"}),". For that, we also need some additional\npackages listed below."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:'pak::pak("tidytext")\npak::pak("stopwords")\npak::pak("ggrepel")\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:'# Define party colors\nparty_colors <- c(\n  "Die Linke" = "#BE3075",\n  "SPD" = "#E3000F",\n  "B\xdcNDNIS 90/DIE GR\xdcNEN" = "#64A12D",\n  "FDP" = "#FFED00",\n  "CDU" = "#000000",\n  "AfD" = "#009EE0"\n)\n# Tokenize ad texts and count word frequencies\ntop_ads %>%\n  unnest(ad_creative_bodies) %>%\n  tidytext::unnest_tokens(word, ad_creative_bodies) %>%\n  filter(!is.na(word)) %>%\n  anti_join(tibble(word = stopwords::stopwords("de")), by = "word") %>%\n  # Select top 30 words per party\n  count(page_name, word, sort = TRUE)  %>%\n  group_by(page_name) %>%\n  top_n(30, n) %>%\n  ungroup() %>% \n  mutate(page_name = fct_relevel(page_name,\n                                 c("Die Linke", "SPD",\n                                   "B\xdcNDNIS 90/DIE GR\xdcNEN", \n                                   "FDP", "CDU", "AfD"))) %>% \n  # Create the chatter plot\n  ggplot(aes(x = page_name, y = n, label = word, color = page_name)) +\n  # geom_point(alpha = 0.7) +\n  ggrepel::geom_text_repel(\n    force = 5,\n    box.padding = 0.1,\n    max.overlaps = Inf,\n    segment.color = NA,  # This removes the lines\n    size = 3\n  ) +  \n  labs(\n    x = "Political Party (Left to Right)",\n    y = "Word Frequency",\n    title = "Common Words in Political Ads by Party"\n  ) +\n  scale_color_manual(values = party_colors) +\n  theme_minimal() +\n  scale_y_log10() +\n  theme(legend.position = "none")\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:a(7278).A+"",width:"1152",height:"768"})}),"\n",(0,i.jsx)(n.p,{children:"This chatter plot visualizes the most frequent words found in the ads of\nGermany\u2019s major political parties. The parties are arranged along the\nx-axis according to their position on the political spectrum, from left\nto right. The y-axis represents the frequency of each word on a\nlogarithmic scale, which helps visualize words with a wide range of\nfrequencies. This type of analysis allows us to quickly grasp the key\nthemes and messaging priorities for each party. For instance, we can\nobserve which topics are unique to certain parties and which are shared\nacross the political landscape, providing insights into their campaign\nstrategies and focus areas."}),"\n",(0,i.jsx)(n.h3,{id:"step-9-examining-demographic-distributions",children:"Step 9: Examining Demographic Distributions"}),"\n",(0,i.jsx)(n.p,{children:"One aspect of the Ad Library data is the audience distribution for each\nad. We requested demographic_distribution in our query, which for each\nad includes the percentage of impressions by age bracket and gender.\nThis data is returned as a nested list-column in our queried dataset. To analyze\nit, we need to unnest that list into a usable table."}),"\n",(0,i.jsxs)(n.p,{children:["We can use ",(0,i.jsx)(n.code,{children:"tidyr::unnest()"})," to expand the demographic distribution:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:"# Unnest demographic distribution into a long format data frame\ndemo_df <- top_ads %>%\n  select(id, page_name, demographic_distribution, page_name) %>%   # focus on relevant columns\n  unnest(demographic_distribution) \n\nhead(demo_df)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"    ## # A tibble: 6 \xd7 5\n    ##   id               page_name percentage age   gender\n    ##   <chr>            <chr>          <dbl> <chr> <chr> \n    ## 1 2124558957977402 SPD          0.00029 18-24 female\n    ## 2 2124558957977402 SPD          0.00159 18-24 male  \n    ## 3 2124558957977402 SPD          0.00391 25-34 female\n    ## 4 2124558957977402 SPD          0.00985 25-34 male  \n    ## 5 2124558957977402 SPD          0.0136  35-44 female\n    ## 6 2124558957977402 SPD          0.0265  35-44 male\n"})}),"\n",(0,i.jsxs)(n.p,{children:["After unnesting, ",(0,i.jsx)(n.code,{children:"demo_df"})," will have one row per demographic category\nper ad. It should include the columns: id (ad id), page_name, age,\ngender, and percentage. Each row might say, for example, ad X \u2013 age\n18-24 \u2013 female \u2013 0.2 (meaning 20% of ad X\u2019s impressions were shown to\nwomen aged 18-24). The percentages for a given ad across all age/gender\ncategories sum up to 100%."]}),"\n",(0,i.jsx)(n.admonition,{title:"Important",type:"community",children:(0,i.jsx)(n.p,{children:"If an ad did not reach a particular demographic group, it may not have an entry for that group."})}),"\n",(0,i.jsx)(n.p,{children:"Now, what can we learn from this? Here are a couple of insights we might\nextract:"}),"\n",(0,i.jsx)(n.p,{children:"Which age groups are ads reaching most frequently? We can count how many\nads reached each age group. For instance, how many ads reached any\npeople in the 65+ category versus 18-24? If few ads have impressions in\nolder age groups, that suggests advertisers either target younger users\nor simply fail to engage older audiences. Similarly, we could examine\nhow many ads target women vs. men, or the average percentage of\nimpressions to women vs. men."}),"\n",(0,i.jsx)(n.admonition,{title:"Note of caution",type:"community",children:(0,i.jsx)(n.p,{children:"A more robust analysis would weight the data by impressions or spending. Averaging percentages across ads without doing so treats a low-reach ad the same as a high-reach one. For simplicity, however, we proceed with the unweighted approach."})}),"\n",(0,i.jsx)(n.p,{children:"For a quick view, we can calculate the overall gender split in relative\nimpressions, assuming equal weight per ad (again, caution advised):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:'demo_df %>% \n  filter(age != "Unknown", gender != "unknown") %>% \n  group_by(page_name, age, gender) %>% \n  summarise(percentage = mean(percentage), .groups = "drop") %>% \n  mutate(percentage = ifelse(gender == "male", -percentage, percentage)) %>% \n  ggplot(aes(x = age, y = percentage, fill = gender)) +\n  geom_col(width = 0.8) +\n  coord_flip() +\n  facet_wrap(~page_name, ncol = 3) +\n  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +\n  labs(\n    x = "Age Group",\n    y = "Average Percentage of Impressions",\n    title = "Ad Audience Demographics by Party, Age, and Gender",\n    fill = "Gender"\n  ) +\n  theme_minimal() +\n  theme(legend.position = "bottom")\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:a(3740).A+"",width:"2700",height:"1800"})}),"\n",(0,i.jsx)(n.p,{children:"In the illustrative chart above, each bar shows how many ads had at\nleast some impressions in that age group. We observe a trend where AfD\nreaches more younger men on average, whereas Die Linke is more likely to\nreach younger women. Keep in mind, this does not directly tell us the\nvolume of impressions, just the distribution of reach. An ad with only a\ntiny fraction of impressions in 65+ would still count here. To truly\nmeasure impression share, one would need to aggregate the percentages\nweighted by each ad\u2019s total impressions. Because the data only provides\nranges for impressions, a rough approach could be to use the midpoint of\neach ad\u2019s impression range as a weight. That level of detail is beyond\nour scope here, but it is something to consider for a more rigorous\nanalysis."}),"\n",(0,i.jsx)(n.p,{children:"In summary, the demographic data allows us to see who is being reached\nby these ads. Advertisers\u2019 choices (or the outcome of the delivery\nalgorithm) become visible: Are they reaching young adults more than\nseniors? Are they targeting predominantly one gender? These insights are\nvaluable for understanding the focus and targeting strategies of\npolitical campaigns."}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsxs)(n.p,{children:["In this tutorial, we demonstrated a full workflow for accessing and\nanalyzing Facebook and Instagram advertising data using R and the Meta\nAd Library API. We covered everything from setting up access credentials\nand verifying identity, to using the ",(0,i.jsx)(n.code,{children:"Radlibrary"})," package to query the\nAPI, and finally exploring the data with ",(0,i.jsx)(n.code,{children:"tidyverse"})," tools and\nvisualizations. We learned how to retrieve ads by keyword or advertiser,\nhow to handle pagination and nested demographic data, and how to create\nbasic insights like time trends and top advertisers."]}),"\n",(0,i.jsxs)(n.p,{children:["The Meta Ad Library API provides researchers to study political\nadvertising and how public discourse is shaped through paid messages. As\na next step, you might refine these examples: try querying a different\nissue or country, dive deeper into ad content with text analysis, fetch\nregional distributions to map out where ads are being seen, or correlate\nspending with specific topics. You may also ",(0,i.jsx)(n.a,{href:"https://data-knowledge-hub.com/docs/data-analysis/04_05_metatargetr",children:"check out my other  tutorial"})," on ",(0,i.jsx)(n.code,{children:"metatargetr"})," which adds additional features not present in the Ad Library API such as retrieval of ad library reports and exact spending on specific target audiences (including detailed and custom audiences)."]}),"\n",(0,i.jsx)(n.p,{children:"Happy researching \u2013 and may your analyses shed light on the world of\nonline (political) ads!"})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}function p(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},1345:(e,n,a)=>{a.d(n,{A:()=>i});const i=a.p+"assets/images/votta-efa52a1637cf5ac9d2c3d87490fc1e4f.jpg"},9273:(e,n,a)=>{a.d(n,{A:()=>i});const i=a.p+"assets/images/signup-27e08a57c0ef83e71ebc62a7acea1720.png"},2948:(e,n,a)=>{a.d(n,{A:()=>i});const i=a.p+"assets/images/unnamed-chunk-15-1-0d708b01ac80280a4fb2aa2bb89dd48c.png"},8967:(e,n,a)=>{a.d(n,{A:()=>i});const i=a.p+"assets/images/unnamed-chunk-16-1-baa7e4b702993c6817a2325b627879b5.png"},834:(e,n,a)=>{a.d(n,{A:()=>i});const i=a.p+"assets/images/unnamed-chunk-17-1-ba47f11b43efbb78621d46e9c52986be.png"},8893:(e,n,a)=>{a.d(n,{A:()=>i});const i=a.p+"assets/images/unnamed-chunk-18-1-cc2d2af08cad0723c2e5be89c422b044.png"},7278:(e,n,a)=>{a.d(n,{A:()=>i});const i=a.p+"assets/images/unnamed-chunk-22-1-bf50607ae95f2a7bc03bebb305346594.png"},3740:(e,n,a)=>{a.d(n,{A:()=>i});const i=a.p+"assets/images/unnamed-chunk-24-1-2b985b172c7e985eb5e2e7d0069b7a04.png"}}]);
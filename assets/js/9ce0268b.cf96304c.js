"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[282],{2517:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>h,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var s=a(4848),n=a(8453);const o={sidebar_position:1,title:"TikTok Hashtag Analysis"},i="Data Collection and Analysis of TikTok Hashtags with JavaScript and Phyton",r={id:"data-analysis/04_02_hashtag-analysis",title:"TikTok Hashtag Analysis",description:"<AuthorCard",source:"@site/docs/04_data-analysis/04_02_hashtag-analysis.mdx",sourceDirName:"04_data-analysis",slug:"/data-analysis/04_02_hashtag-analysis",permalink:"/docs/data-analysis/04_02_hashtag-analysis",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"TikTok Hashtag Analysis"},sidebar:"docs",previous:{title:"Overview: How to analyse social media data",permalink:"/docs/data-analysis/04_01_data-analysis-methods"},next:{title:"Social Network Analysis",permalink:"/docs/data-analysis/04_03_social-network-analysis"}},h={},l=[{value:"Scraping Data on TikTok with puppeteer",id:"scraping-data-on-tiktok-with-puppeteer",level:2},{value:"Tech Setup",id:"tech-setup",level:3},{value:"Storing",id:"storing",level:3},{value:"Analysis",id:"analysis",level:2},{value:"Tech Setup",id:"tech-setup-1",level:3},{value:"Import Data",id:"import-data",level:3},{value:"Hashtag Analysis",id:"hashtag-analysis",level:3},{value:"What to do with the results",id:"what-to-do-with-the-results",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",p:"p",pre:"pre",strong:"strong",...(0,n.R)(),...e.components},{AuthorCard:o,LanguageChip:i,LastUpdatedByChip:r,PlatformChip:h,VideoCard:l}=t;return o||p("AuthorCard",!0),i||p("LanguageChip",!0),r||p("LastUpdatedByChip",!0),h||p("PlatformChip",!0),l||p("VideoCard",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"data-collection-and-analysis-of-tiktok-hashtags-with-javascript-and-phyton",children:"Data Collection and Analysis of TikTok Hashtags with JavaScript and Phyton"})}),"\n",(0,s.jsx)(h,{platform:"TikTok"}),"\n",(0,s.jsx)(i,{lang:"JavaScript / Python"}),"\n",(0,s.jsx)(o,{name:"Martin Degeling",avatar:"MD",position:"Stiftung Neue Verantwortung",website:"https://www.stiftung-nv.de/de/person/dr-martin-degeling",mastodon:"https://chaos.social/@mrtn3000"}),"\n",(0,s.jsx)(r,{authorOriginal:"Martin Degeling",createdOn:"13.09.2024"}),"\n",(0,s.jsx)(l,{videoSrc:"https://github.com/bertelsmannstift/data-knowledge-hub_videos/raw/main/videos/UPDEM_Degeling_540.mp4",thumbnailSrc:"https://github.com/bertelsmannstift/data-knowledge-hub_videos/raw/main/thumbnails/UPDEM_Degeling_540.png"}),"\n",(0,s.jsxs)(t.p,{children:["In this chapter you will learn about the different steps necessary to conduct a hashtag analysis on TikTok that can result in a visualization like this: ",(0,s.jsx)(t.a,{href:"https://martin.degeling.com/snv/fyp-hashtags-by-week/",children:"Hashtag Analysis by Week"})]}),"\n",(0,s.jsx)(t.p,{children:"The basis of the visualization is a continuous data collection of videos to TikTok."}),"\n",(0,s.jsxs)(t.p,{children:["Short ",(0,s.jsx)(t.strong,{children:"TikTok primer"}),": TikTok is an app-based social network where users share (mostly) short videos on various topics. Over the last few years TikTok has been the fastest growing social network worldwide Besides the focus on moving images another aspect that distinguishes TikTok from other social networks is that its feed algorithm (the recommender system) is less focused on the social graph (showing videos that your contacts have liked or viewed), but instead creates ",(0,s.jsx)(t.strong,{children:"interest graphs"})," that focus on showing content regardless of the author."]}),"\n",(0,s.jsxs)(t.p,{children:["The purpose of a hashtags analysis on the TikTok front page, the For You Page(FYP), is to learn more about what kind of videos are initially shown to users that have not used the TikTok app before. The process of the analysis includes the ",(0,s.jsx)(t.strong,{children:"following steps"}),":"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Step 1:"})," Scraping Data with ",(0,s.jsx)(t.strong,{children:"puppeteer"})]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Step 2:"})," Analyzing and Visualizing with ",(0,s.jsx)(t.strong,{children:"Jupyter Notebooks"})]}),"\n",(0,s.jsx)(t.h2,{id:"scraping-data-on-tiktok-with-puppeteer",children:"Scraping Data on TikTok with puppeteer"}),"\n",(0,s.jsxs)(t.p,{children:["For this analysis we will leverage the ",(0,s.jsx)(t.strong,{children:"web version of TikTok"})," accessible with any browser on TikTok.com."]}),"\n",(0,s.jsx)(t.p,{children:"While there are various \u201cunofficial APIs\u201d or libraries available that allow you to scrape content from TikTok, the purpose of this chapter is to build a scraper from scratch."}),"\n",(0,s.jsxs)(t.p,{children:["Below, you will find a basic scraping built on ",(0,s.jsx)(t.a,{href:"https://github.com/puppeteer/puppeteer",children:"pupeteer"})," to open the web version of the FYP."]}),"\n",(0,s.jsx)(t.h3,{id:"tech-setup",children:"Tech Setup"}),"\n",(0,s.jsxs)(t.p,{children:["To run this project, you should be able to open a command line on your computer and install software. For the first part you need to have ",(0,s.jsx)(t.a,{href:"https://nodejs.org/en",children:"nodejs"})," installed. After you have created a folder and navigated to it with the console run ",(0,s.jsx)(t.code,{children:"npm install pupeteer"})," in it."]}),"\n",(0,s.jsxs)(t.p,{children:["A ",(0,s.jsx)(t.strong,{children:"basic scraper"})," that opens the TikTok website should look like this:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:'const puppeteer = require("puppeteer");\r\n\r\nasync function run() {\r\n  // Setting up the browser\r\n  const browser = await puppeteer.launch({\r\n    executablePath: "/usr/bin/google-chrome", //we want to run chrome. You need to adjust this depening on your operating system\r\n    headless: false, // we want to see what pupeteer is doing, headless:true would mean the browser is not shown\r\n    defaultViewport: null,\r\n    args: ["--window-size=1920,1080"],\r\n  });\r\n  const page = await browser.newPage(); // opening a new tab\r\n  await page.goto("https://tiktok.com/foryou"); // open TikTok\r\n}\r\n\r\nrun();\n'})}),"\n",(0,s.jsx)(t.p,{children:"This should bring up a browser windows like this:"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:a(6120).A+"",width:"1880",height:"994"})}),"\n",(0,s.jsx)(t.p,{children:"This basic process, already allows you to garner information about the videos TikTok would like to show you- even though you can\u2019t see them. You can right-click on the page and select \u201cview source\u201d (or press ctrl+u) to see the HTML source code of the site. Search for \u201cItemModule\u201d and you will be able to access information about the videos in a structured JSON-format."}),"\n",(0,s.jsxs)(t.p,{children:["The JSON object contains information about the first eight videos that are available or displayed on the FYP. The structure of each JSON object is shown ",(0,s.jsx)(t.a,{href:"https://github.com/snv-berlin/tiktok-audit/blob/main/TikTok%20Web/examples/video_schema_web.json",children:"here"}),". You can extract that data automatically and put it on an internal list like this:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:'// once the page is loaded we will search for the javascript block with the ID #SIGI_STATE and parse it\'s content as JSON\r\nconst sigistate = await page.$eval("#SIGI_STATE", (el) => el.innerHTML);\r\ninitinfo = JSON.parse(sigistate);\r\nvideos = [];\r\n\r\n// Iterate through the list of videos and add it to our own data structure\r\nObject.keys(initinfo.ItemModule).forEach(async (el, c) => {\r\n  videos.push(initinfo.ItemModule[el]);\r\n});\n'})}),"\n",(0,s.jsx)(t.p,{children:"If you research requires you to get data on more videos, you have to interact with the website. When accessing the site, you will be initially prompted by a login popup, which you can close automatically."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:a(5721).A+"",width:"1870",height:"989"})}),"\n",(0,s.jsxs)(t.p,{children:["If you are working with Chrome, you can use the developer settings to find out how you can manipulate the button with puppeteer. First open the developer console with F12, then right click the close icon, select \u201cInspect\u201d and find the parent element that seems unique. In this case there is a ",(0,s.jsx)(t.code,{children:"div"})," element with the attribute ",(0,s.jsx)(t.code,{children:'data-e2e="modal-close-inner-button"'}),".\r\nIn puppeteer, you can use this attribute to identify the \u201cX\u201d and click it like this:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"let logindialog = await page.$('div[data-e2e=\"modal-close-inner-button\"]'); // waiting until the page is loaded to the point where the dialog shows up\r\nawait logindialog.click(page, 'div[data-e2e=\"modal-close-inner-button\"]'); // click on the X\n"})}),"\n",(0,s.jsx)(t.p,{children:"After that we can scroll the page forever, tapping the key-down every two seconds."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:'while (true) {\r\n  // this loops runs indefinitivly, if we don\'t close it\r\n  await page.waitForTimeout(2000); // wait 2000 milliseconds\r\n  await page.keyboard.press("ArrowDown"); // pree the ArrowDown Key\r\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["When watching the bot scroll through TikTok and looking at the network traffic in the developer console you\u2019ll notice that there is a infrequent call to a TikTok API ",(0,s.jsx)(t.code,{children:"https://www.tiktok.com/api/recommend/item_list/ "})," that returns a list of the next 30 videos. Finding this request and understanding what it is might be more complicated on other platforms or services. In some cases, ",(0,s.jsx)(t.a,{href:"https://themarkup.org/levelup/2023/03/03/journalists-you-should-be-looking-for-undocumented-apis-heres-how-to-start",children:"undocumented APIs"})," can be a key element of data-driven investigations to help make sense of what you are collecting."]}),"\n",(0,s.jsx)(t.p,{children:"With puppeteer, you can intercept network traffic and grab the list of recommended videos for your analysis - since it is running from within the browser you do not have to worry about any encryption. You can intercept the responses to this specific URL and process the video metadata as you like:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:'await page.setRequestInterception(true); // setting up pupeteer to monitor requests and responses\r\npage.on("request", (request) => request.continue()); // we do not care about requests send to servers, so we just continue on those\r\npage.on("response", (response) => {\r\n  // responses are parsed by the following script\r\n  try {\r\n    if (response.url().indexOf("api/recommend/item_list/item_list") > 0) {\r\n      //if data comes from the API we have identified we process it\r\n      response.json().then((data) => {\r\n        // parse it as json\r\n        data.itemList.forEach(async (el, c) => {\r\n          // and iterate over the videos in the list to store.\r\n          videos.push({ id: el.id, textExtra: el.textExtra });\r\n        });\r\n      });\r\n      console.log("Received Video Data. Seen " + videos.length + " so far");\r\n    }\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n});\n'})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"You have now successfully created a scraper for the TikTok public ForYouPage with less than 50 lines of code."})," Review the full ",(0,s.jsx)(t.a,{href:"https://github.com/snv-berlin/tiktok-hashtags-knowledgehub/blob/main/scraper/scrape_tiktok.js",children:"here"})]}),"\n",(0,s.jsx)(t.h3,{id:"storing",children:"Storing"}),"\n",(0,s.jsxs)(t.p,{children:["To analyze a specific data set over a longer period, you need to store and process it. For this example project, you can use a file-based database like ",(0,s.jsx)(t.a,{href:"https://www.npmjs.com/package/node-json-db",children:"node-json-db"})," that stores everything in a single JSON file. If you plan to run a project like this on a larger scale, you should consider regular database servers like ",(0,s.jsx)(t.a,{href:"https://redis.io/",children:"Redis"})," or ",(0,s.jsx)(t.a,{href:"https://mongodb.com/",children:"MongoDB"}),".\r\nYou can install it with ",(0,s.jsx)(t.code,{children:"npm install node-json-db"})," similar to the installation of puppeteer above. You can than run the full code from ",(0,s.jsx)(t.a,{href:"https://github.com/snv-berlin/tiktok-hashtags-knowledgehub/blob/main/scraper/scrape_tiktok_withDB.js",children:"here"})]}),"\n",(0,s.jsx)(t.p,{children:"Note that in this example you only store the video ID, hashtags and statistics as you do not need all the additional (personal) information and should ensure cleaning your scraped data for legal and ethical reasons."}),"\n",(0,s.jsx)(t.h2,{id:"analysis",children:"Analysis"}),"\n",(0,s.jsx)(t.h3,{id:"tech-setup-1",children:"Tech Setup"}),"\n",(0,s.jsxs)(t.p,{children:["To help analyze your data, consider using ",(0,s.jsx)(t.a,{href:"https://jupyter.org/",children:"jupyter"})," notebooks with python. Experience shows that ",(0,s.jsx)(t.a,{href:"https://docs.conda.io/en/latest/miniconda.html",children:"miniconda"})," works well to run python and install dependencies. You can use the conda environment published with this tutorial."]}),"\n",(0,s.jsx)(t.h3,{id:"import-data",children:"Import Data"}),"\n",(0,s.jsx)(t.p,{children:"First, you can import the JSON database into a python dictionary:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"import json\r\nwith open('../../../tiktok-fyp-videos.json') as file:\r\n    database = json.load(file)\r\nprint(len(database.keys()), 'videos in database')\n"})}),"\n",(0,s.jsx)(t.p,{children:"This will result in something like: 474 videos in database (if you let the scraper run longer or multiple times, you will of course have more videos in your dataset)."}),"\n",(0,s.jsx)(t.p,{children:"At this point you can have a look at the data you have collected so far."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"import pprint\r\npprint.pprint(next(iter(database.values())))\n"})}),"\n",(0,s.jsxs)(t.p,{children:["This will print the first video in the database. You can find an example of the structure of the video object ",(0,s.jsx)(t.a,{href:"https://github.com/snv-berlin/tiktok-hashtags-knowledgehub/blob/main/scraper/example_video_metadata.json",children:"here"}),". It contains a lot of technical information, e.g. about the video quality and URLs of cover pictures, avatars, music and subtitles.\r\nBut also the name of the author in ",(0,s.jsx)(t.code,{children:"authorID"})," some statics in ",(0,s.jsx)(t.code,{children:"stats"})," and of course the hashtags in the ",(0,s.jsx)(t.code,{children:"textExtra"})," field.\r\nLet's first look at the video statistics. We can iterate over all videos and collect the views in an array. And then let the numpy package do the math:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'video_views = []\r\nfor video in database.values():\r\n    video_views.append(video["stats"]["playCount"])\r\n\r\naverage = np.mean(video_views)\r\nprint("Average views:", average)\n'})}),"\n",(0,s.jsxs)(t.p,{children:["This will result in ",(0,s.jsx)(t.code,{children:"Average views: 20519932.70042194"}),", or in plainer terms: more than 20 million views per video on average. That seems like a lot. A histogram plot shows that the data is not evenly distributed. There are a few videos with a huge number of views. Outliers from the rest."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:a(3717).A+"",width:"577",height:"456"})}),"\n",(0,s.jsx)(t.p,{children:"Because of this distribution the median will therefore give a better idea of the 'average'"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'median = np.median(video_views)\r\nprint("Median views:", median)\n'})}),"\n",(0,s.jsx)(t.p,{children:"You can also limit the histogram plot to up to 10 million views and see that the majority of videos shown on the FYP for non-logged in web users is focused on videos that already had a large audience."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:a(4199).A+"",width:"577",height:"456"})}),"\n",(0,s.jsx)(t.h3,{id:"hashtag-analysis",children:"Hashtag Analysis"}),"\n",(0,s.jsx)(t.p,{children:"You can now iterate over all videos in the database to count hashtag occurrences and videos without hashtags to better understand the quality of the data."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'from itertools import combinations\r\nimport numpy as np\r\n\r\nvideos_wo_hashtags = 0\r\nhashtag_occurences = {}\r\n\r\nfor video in database.values():\r\n    video_views.append(video["stats"]["playCount"])\r\n    if "textExtra" in video:\r\n        for hashtag in video["textExtra"]:\r\n            if hashtag["hashtagName"] not in hashtag_occurences:\r\n                hashtag_occurences[hashtag["hashtagName"]] = 1\r\n            else:\r\n                hashtag_occurences[hashtag["hashtagName"]] += 1\r\n    else:\r\n        videos_wo_hashtags += 1\r\n# Use of hashtags\r\nprint("There are", videos_wo_hashtags, "videos without hashtags (", videos_wo_hashtags*100/len(database.keys()), "%)")\n'})}),"\n",(0,s.jsx)(t.p,{children:"You will find that 17% of the videos do not use hashtags."}),"\n",(0,s.jsx)(t.p,{children:"If you go ahead and plot the network of hashtag combinations, you will get a graph like this:"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:a(2627).A+"",width:"1199",height:"551"})}),"\n",(0,s.jsx)(t.p,{children:"Similarly, you can also look at the distribution of hashtags by sorting the list and printing the 20 most common hashtags."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'hashtags_sorted = dict(sorted(hashtag_occurences.items(), key=lambda item: item[1], reverse=True))\r\nprint("The ten most common hashtags:")\r\nprint(list(hashtags_sorted)[:20])\n'})}),"\n",(0,s.jsx)(t.p,{children:"You see that the most common hashtags are related to TikTok itself and do not describe its content. To learn more about what type of videos are shown on the FYP you should exclude these hashtags:\r\n['fyp', '', 'viral', 'foryou', 'foryoupage', 'fy', 'fyp \u30b7', 'funny', 'funnyvideos', 'tiktok', 'f\xfcrdich', 'trending', 'trend', 'viralvideo']"}),"\n",(0,s.jsx)(t.p,{children:"A network graph consists of nodes (the circles) and edges (connections). Again you iterate over all videos to get a list of hashtags (nodes) and store as an edge if they occurred together on a video."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"exclude_hashtags = ['fyp', '', 'foryou', 'viral', 'foryoupage', 'fyp\u30b7', 'fy', 'f\xfcrdich', 'trending', 'foryoupage', 'tiktok', 'viralvideo', 'f\xfcrdichseite\u30b7', '4u']\r\nhashtag_nodes = {}\r\nhashtag_edges = []\r\nfor video in database.values():\r\n\tlistofhashtags = []\r\n\tif \"textExtra\" in video:\r\n\t\tfor hashtag in video[\"textExtra\"]:\r\n\t\t\tif hashtag[\"hashtagName\"] not in exclude_hashtags:\r\n\t\t\t\tlistofhashtags.append(hashtag[\"hashtagName\"])\r\n\t\t\t\tif hashtag[\"hashtagName\"] not in hashtag_nodes:\r\n\t\t\t\t\thashtag_nodes[hashtag[\"hashtagName\"]]=len(hashtag_nodes.keys())+1\r\n\tfor combination in combinations(listofhashtags, 2):\r\n\t\thashtag_edges.append([hashtag_nodes[combination[0]],\r\n\t\thashtag_nodes[combination[1]]])\r\n\n"})}),"\n",(0,s.jsx)(t.p,{children:"and visualize it with pyvis:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"net = pyvis.network.Network(notebook=False, cdn_resources='local')\r\n\r\nnode_count = 1\r\nfor hashtag in hashtag_nodes:\r\n\tnet.add_node(node_count, label=hashtag)\r\n\tnode_count+=1\r\n\tnet.add_edges(hashtag_edges)\r\n\tnet.show_buttons(filter_='physics')\r\nnet.show('selected_hashtags.html')\n"})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:a(3795).A+"",width:"651",height:"584"})}),"\n",(0,s.jsx)(t.h2,{id:"what-to-do-with-the-results",children:"What to do with the results"}),"\n",(0,s.jsx)(t.p,{children:"Congratulations you've set up a TikTok scraper that collects data on videos shown on the FYP page and visualized them in a network. You can now start to dive deep into the data and identify topic clusters or learn what topics are dominating the network."})]})}function c(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}function p(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},6120:(e,t,a)=>{a.d(t,{A:()=>s});const s=a.p+"assets/images/20230628145632-d7a86207e63a9ef3605cd019bf2abc85.png"},3795:(e,t,a)=>{a.d(t,{A:()=>s});const s=a.p+"assets/images/20230704090400-96cfd990e714b01c731f7206c734e8fb.png"},4199:(e,t,a)=>{a.d(t,{A:()=>s});const s=a.p+"assets/images/20230704094035-c712631dd04a88c1be4bd1fb5ca74f77.png"},3717:(e,t,a)=>{a.d(t,{A:()=>s});const s=a.p+"assets/images/20230704094446-3624de63aa66a026c83e48d15172682a.png"},2627:(e,t,a)=>{a.d(t,{A:()=>s});const s=a.p+"assets/images/20230704103025-cd0261b7c40aa0cedb0be6fa258c25b9.png"},5721:(e,t,a)=>{a.d(t,{A:()=>s});const s=a.p+"assets/images/close_login-2484b21ae7b8fb97af2c2f9674e860c5.gif"}}]);